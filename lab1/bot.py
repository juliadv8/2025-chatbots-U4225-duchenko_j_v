#!/usr/bin/env python3
"""
Telegram bot: Saint Petersburg Museums directory
Library: python-telegram-bot (v21+, asyncio)
Author: ChatGPT
"""
from __future__ import annotations

import asyncio
import json
import logging
import os
from dataclasses import dataclass
from pathlib import Path
from typing import Dict, List, Optional, Tuple

from dotenv import load_dotenv
from rapidfuzz import process, fuzz

from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

# --------------------- Configuration & Logging ---------------------
load_dotenv()  # loads .env if present

BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "").strip()
ADMIN_USER_ID = os.getenv("ADMIN_USER_ID", "").strip()  # optional

# Paths
BASE_DIR = Path(__file__).resolve().parent
DATA_PATH = BASE_DIR / "data" / "museums.json"

# Logging config
logging.basicConfig(
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s",
    level=logging.DEBUG,
)
logger = logging.getLogger("spb-museums-bot")


# --------------------- Data Model ---------------------
@dataclass
class Museum:
    id: str
    name: str
    hours: str
    address: str
    tickets: str
    url: Optional[str] = None

    @classmethod
    def from_dict(cls, d: Dict) -> "Museum":
        return cls(
            id=str(d.get("id", "")),
            name=d.get("name", ""),
            hours=d.get("hours", ""),
            address=d.get("address", ""),
            tickets=d.get("tickets", ""),
            url=d.get("url"),
        )

    def to_markdown(self) -> str:
        parts = [
            f"*{escape_md(self.name)}*",
            f"üïí *–ì—Ä–∞—Ñ–∏–∫:* {escape_md(self.hours)}",
            f"üìç *–ê–¥—Ä–µ—Å:* {escape_md(self.address)}",
            f"üéüÔ∏è *–ë–∏–ª–µ—Ç—ã:* {escape_md(self.tickets)}",
        ]
        if self.url:
            parts.append(f"üåê *–°–∞–π—Ç:* {escape_md(self.url)}")
        return "\n".join(parts)


def escape_md(text: str) -> str:
    """Escape characters for Telegram MarkdownV2."""
    # Minimal escaping for *_[]()~`>#+-=|{}.! per MarkdownV2 rules
    if text is None:
        return ""
    esc = ""
    for ch in text:
        if ch in r"_*[]()~`>#+-=|{}.!":
            esc += "\\" + ch
        else:
            esc += ch
    return esc


class MuseumStore:
    """JSON-backed store with simple in-memory cache + fuzzy search."""
    def __init__(self, data_path: Path):
        self.data_path = data_path
        self._items: Dict[str, Museum] = {}

    def load(self) -> None:
        if not self.data_path.exists():
            logger.warning("Data file not found. Creating default dataset at %s", self.data_path)
            self._bootstrap_defaults()
        with self.data_path.open("r", encoding="utf-8") as f:
            data = json.load(f)
        self._items = {str(d["id"]): Museum.from_dict(d) for d in data}

    def save(self) -> None:
        data = [vars(m) for m in self._items.values()]
        self.data_path.parent.mkdir(parents=True, exist_ok=True)
        with self.data_path.open("w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)

    def all(self) -> List[Museum]:
        return list(self._items.values())

    def get_by_id(self, mid: str) -> Optional[Museum]:
        return self._items.get(str(mid))

    def find(self, query: str, limit: int = 5) -> List[Museum]:
        if not query:
            return []
        names_map = {m.name: m for m in self._items.values()}
        # RapidFuzz returns list of tuples (choice, score, index)
        matches = process.extract(
            query,
            names_map.keys(),
            scorer=fuzz.WRatio,
            limit=limit,
        )
        # Filter weak matches
        result = []
        for name, score, _ in matches:
            if score >= 60:  # threshold
                result.append(names_map[name])
        # Also add substring matches (case-insensitive) not already included
        q = query.lower()
        for m in self._items.values():
            if q in m.name.lower() and m not in result:
                result.append(m)
        return result[:limit]

    def _bootstrap_defaults(self) -> None:
        default_data = [
            {
                "id": "1",
                "name": "–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π –≠—Ä–º–∏—Ç–∞–∂",
                "hours": "–í—Ç, –ß—Ç, –°–±, –í—Å 10:30‚Äì18:00; –°—Ä, –ü—Ç 10:30‚Äì21:00; –ü–Ω ‚Äî –≤—ã—Ö–æ–¥–Ω–æ–π",
                "address": "–î–≤–æ—Ä—Ü–æ–≤–∞—è –ø–ª., 2",
                "tickets": "–û—Ç 500 ‚ÇΩ (–ª—å–≥–æ—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã); –±–µ—Å–ø–ª–∞—Ç–Ω–æ –¥–ª—è –¥–µ—Ç–µ–π –¥–æ 18",
                "url": "https://www.hermitagemuseum.org/",
            },
            {
                "id": "2",
                "name": "–†—É—Å—Å–∫–∏–π –º—É–∑–µ–π (–ú–∏—Ö–∞–π–ª–æ–≤—Å–∫–∏–π –¥–≤–æ—Ä–µ—Ü)",
                "hours": "–ü–Ω, –°—Ä, –ü—Ç, –°–±, –í—Å 10:00‚Äì18:00; –ß—Ç 13:00‚Äì21:00; –í—Ç–æ—Ä–Ω–∏–∫ ‚Äî –≤—ã—Ö–æ–¥–Ω–æ–π",
                "address": "–ò–Ω–∂–µ–Ω–µ—Ä–Ω–∞—è —É–ª., 4",
                "tickets": "–û—Ç 500 ‚ÇΩ; –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–∏–ª–µ—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã",
                "url": "https://rusmuseum.ru/",
            },
            {
                "id": "3",
                "name": "–ú—É–∑–µ–π –∞–Ω—Ç—Ä–æ–ø–æ–ª–æ–≥–∏–∏ –∏ —ç—Ç–Ω–æ–≥—Ä–∞—Ñ–∏–∏ (–ö—É–Ω—Å—Ç–∫–∞–º–µ—Ä–∞)",
                "hours": "–°—Ä‚Äì–í—Å 11:00‚Äì19:00; –ü–Ω, –í—Ç ‚Äî –≤—ã—Ö–æ–¥–Ω–æ–π",
                "address": "–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—Å–∫–∞—è –Ω–∞–±., 3",
                "tickets": "–í–∑—Ä–æ—Å–ª—ã–π 400‚Äì500 ‚ÇΩ; –ª—å–≥–æ—Ç—ã",
                "url": "https://www.kunstkamera.ru/",
            },
            {
                "id": "4",
                "name": "–ú—É–∑–µ–π –§–∞–±–µ—Ä–∂–µ",
                "hours": "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ 10:00‚Äì21:00",
                "address": "–ù–∞–±. —Ä–µ–∫–∏ –§–æ–Ω—Ç–∞–Ω–∫–∏, 21",
                "tickets": "–í–∑—Ä–æ—Å–ª—ã–π –æ—Ç 650 ‚ÇΩ; –∞—É–¥–∏–æ–≥–∏–¥ –æ—Ç–¥–µ–ª—å–Ω–æ",
                "url": "https://fabergemuseum.ru/",
            },
            {
                "id": "5",
                "name": "–≠—Ä–∞—Ä—Ç–∞ –ú—É–∑–µ–π –°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ò—Å–∫—É—Å—Å—Ç–≤–∞",
                "hours": "–ü–Ω‚Äì–í—Å 10:00‚Äì22:00 (–°—Ä ‚Äî –≤—ã—Ö–æ–¥–Ω–æ–π)",
                "address": "29-—è –ª–∏–Ω–∏—è –í.–û., 2",
                "tickets": "–í–∑—Ä–æ—Å–ª—ã–π –æ—Ç 1200 ‚ÇΩ; –ª—å–≥–æ—Ç—ã",
                "url": "https://www.erarta.com/",
            },
            {
                "id": "6",
                "name": "–ú—É–∑–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–∞ (–ü–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫–∞—è –∫—Ä–µ–ø–æ—Å—Ç—å)",
                "hours": "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ 10:00‚Äì18:00; –°—Ä –¥–æ 17:00 (—Ä–∞–∑–¥–µ–ª—ã –º—É–∑–µ—è –º–æ–≥—É—Ç –∏–º–µ—Ç—å —Å–≤–æ–π —Ä–µ–∂–∏–º)",
                "address": "–ü–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫–∞—è –∫—Ä–µ–ø–æ—Å—Ç—å, 3",
                "tickets": "–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ –±–∏–ª–µ—Ç—ã –æ—Ç 750 ‚ÇΩ",
                "url": "https://spbmuseum.ru/",
            },
            {
                "id": "7",
                "name": "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–æ–µ–Ω–Ω–æ-–º–æ—Ä—Å–∫–æ–π –º—É–∑–µ–π",
                "hours": "–°—Ä‚Äì–í—Å 11:00‚Äì19:00; –ü–Ω, –í—Ç ‚Äî –≤—ã—Ö–æ–¥–Ω–æ–π",
                "address": "–ü–ª–æ—â–∞–¥—å –¢—Ä—É–¥–∞, 5",
                "tickets": "–í–∑—Ä–æ—Å–ª—ã–π 500 ‚ÇΩ; –ª—å–≥–æ—Ç—ã",
                "url": "https://navalmuseum.ru/",
            },
        ]
        self.data_path.parent.mkdir(parents=True, exist_ok=True)
        with self.data_path.open("w", encoding="utf-8") as f:
            json.dump(default_data, f, ensure_ascii=False, indent=2)
        logger.info("Default dataset created with %d items", len(default_data))


store = MuseumStore(DATA_PATH)


# --------------------- Bot Behavior ---------------------
HELP_TEXT = (
    "–Ø ‚Äî —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø–æ –º—É–∑–µ—è–º –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–∞.\n\n"
    "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
    "/start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞\n"
    "/help ‚Äî –ø–æ–º–æ—â—å –∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
    "/list ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –º—É–∑–µ–∏ (id –∏ –Ω–∞–∑–≤–∞–Ω–∏—è)\n"
    "/find <–∑–∞–ø—Ä–æ—Å> ‚Äî –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (—Ñ–∞–∑–∑–∏ + –ø–æ–¥—Å—Ç—Ä–æ–∫–∞)\n"
    "/museum <id|–Ω–∞–∑–≤–∞–Ω–∏–µ> ‚Äî –ø–æ–¥—Ä–æ–±–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –º—É–∑–µ—è\n"
    "/random ‚Äî —Å–ª—É—á–∞–π–Ω—ã–π –º—É–∑–µ–π\n"
    "/ping ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏\n"
)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n" + HELP_TEXT,
        disable_web_page_preview=True,
    )


async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(HELP_TEXT, disable_web_page_preview=True)


def format_list(items: List[Museum]) -> str:
    lines = []
    for m in items:
        lines.append(f"{m.id}. {m.name}")
    return "–°–ø–∏—Å–æ–∫ –º—É–∑–µ–µ–≤:\n" + "\n".join(lines) if lines else "–ü–æ–∫–∞ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç."


async def list_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    items = store.all()
    text = format_list(items)
    await update.message.reply_text(text)


async def find_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = " ".join(context.args) if context.args else ""
    if not query:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –∑–∞–ø—Ä–æ—Å: –Ω–∞–ø—Ä–∏–º–µ—Ä, `/find —ç—Ä–º–∏—Ç–∞–∂`", parse_mode=ParseMode.MARKDOWN_V2)
        return
    matches = store.find(query, limit=7)
    if not matches:
        await update.message.reply_text("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à—ë–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–Ω–∞—á–µ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å.")
        return
    text = "–ù–∞—à—ë–ª:\n" + "\n".join(f"{m.id}. {m.name}" for m in matches)
    await update.message.reply_text(text)


def resolve_museum(arg: str) -> Optional[Museum]:
    if not arg:
        return None
    # Try by id first
    m = store.get_by_id(arg)
    if m:
        return m
    # Fuzzy by name
    matches = store.find(arg, limit=1)
    return matches[0] if matches else None


async def museum_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    arg = " ".join(context.args) if context.args else ""
    if not arg:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ id –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ: `/museum 1` –∏–ª–∏ `/museum —ç—Ä–º–∏—Ç–∞–∂`", parse_mode=ParseMode.MARKDOWN_V2)
        return
    m = resolve_museum(arg)
    if not m:
        await update.message.reply_text("–ú—É–∑–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–æ–¥ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /list –∏ /find.")
        return
    await update.message.reply_text(m.to_markdown(), parse_mode=ParseMode.MARKDOWN_V2, disable_web_page_preview=True)


async def random_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    import random
    items = store.all()
    if not items:
        await update.message.reply_text("–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø—É—Å—Ç.")
        return
    m = random.choice(items)
    await update.message.reply_text(m.to_markdown(), parse_mode=ParseMode.MARKDOWN_V2, disable_web_page_preview=True)


async def ping_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("pong ‚úÖ")


async def fallback_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Graceful answer for free-form text: try to search by name."""
    text = (update.message.text or "").strip()
    if not text:
        return
    # Heuristic: if user typed a short phrase, attempt search
    matches = store.find(text, limit=3)
    if matches:
        ans = "–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏—Å–∫–∞–ª–∏:\n" + "\n".join(f"{m.id}. {m.name}" for m in matches)
        ans += "\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/museum <id>` –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π."
        await update.message.reply_text(ans)
    else:
        await update.message.reply_text("–Ø –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—ã /list, /find, /museum –∏ –¥—Ä. –ù–∞–ø–∏—à–∏—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")


# --------------------- Error handling ---------------------
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.exception("Unhandled error: %s", context.error)
    # Notify user if possible
    try:
        if isinstance(update, Update) and update.effective_chat:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="–û–π! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üòø –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /help.",
            )
    except Exception:
        pass
    # Optionally notify admin
    if ADMIN_USER_ID:
        try:
            await context.bot.send_message(
                chat_id=int(ADMIN_USER_ID),
                text=f"‚ö†Ô∏è Bot error: {context.error}",
            )
        except Exception:
            pass


# --------------------- App bootstrap ---------------------

async def _post_init(app: Application) -> None:
    logger.info("Bot started")


def ensure_data_loaded() -> None:
    try:
        store.load()
    except json.JSONDecodeError as e:
        logger.error("Invalid JSON in %s: %s. Recreating with defaults.", DATA_PATH, e)
        # Backup broken file and recreate
        try:
            broken = DATA_PATH.with_suffix(".broken.json")
            DATA_PATH.replace(broken)
            logger.warning("Backed up invalid file to %s", broken)
        except Exception:
            logger.exception("Failed to backup invalid data file")
        store._bootstrap_defaults()
        store.load()


def main() -> None:
    if not BOT_TOKEN:
        raise RuntimeError("TELEGRAM_BOT_TOKEN is not set. See .env.example")

    ensure_data_loaded()

    application: Application = (
        ApplicationBuilder()
        .token(BOT_TOKEN)
        .post_init(_post_init)
        .build()
    )

    # Command handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_cmd))
    application.add_handler(CommandHandler("list", list_cmd))
    application.add_handler(CommandHandler("find", find_cmd))
    application.add_handler(CommandHandler("museum", museum_cmd))
    application.add_handler(CommandHandler("random", random_cmd))
    application.add_handler(CommandHandler("ping", ping_cmd))

    # Fallback text handler (simple search)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, fallback_text))

    # Errors
    application.add_error_handler(error_handler)

    # Start
    application.run_polling(stop_signals=None)  # handle signals internally


if __name__ == "__main__":
    main()
