#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Telegram-bot: –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –º—É–∑–µ–µ–≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–∞ + –ø–æ–≥–æ–¥–∞ (Open-Meteo) + –º–∞—Ä—à—Ä—É—Ç (–Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã)

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: python-telegram-bot v21+, requests, rapidfuzz
–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞:
.
‚îú‚îÄ bot.py
‚îú‚îÄ requirements.txt
‚îú‚îÄ README.md
‚îî‚îÄ data/
   ‚îî‚îÄ museums.json
"""

import json
import logging
import os
import random
import time
from functools import lru_cache
from pathlib import Path
from typing import Any, Dict, List, Optional, Tuple
from urllib.parse import quote_plus

import requests
from rapidfuzz import fuzz, process
from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

# ---------------------------- –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ----------------------------

logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger("spb-museums-bot")

# ---------------------------- –ö–û–ù–°–¢–ê–ù–¢–´ ----------------------------

DATA_DIR = Path(__file__).parent / "data"
MUSEUMS_PATH = DATA_DIR / "museums.json"
DEFAULT_CITY = "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"

OPEN_METEO_GEOCODE = (
    "https://geocoding-api.open-meteo.com/v1/search?name={name}&count=1&language=ru&format=json"
)
OPEN_METEO_FORECAST = (
    "https://api.open-meteo.com/v1/forecast?latitude={lat}&longitude={lon}&current=temperature_2m,weather_code&timezone={tz}"
)

# –ü—Ä–æ—Å—Ç–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –∫–æ–¥–æ–≤ –ø–æ–≥–æ–¥—ã Open-Meteo
WEATHER_CODE_MAP = {
    0: "—è—Å–Ω–æ",
    1: "–≤ –æ—Å–Ω–æ–≤–Ω–æ–º —è—Å–Ω–æ",
    2: "–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å",
    3: "–ø–∞—Å–º—É—Ä–Ω–æ",
    45: "—Ç—É–º–∞–Ω",
    48: "–∏–∑–º–æ—Ä–æ–∑—å",
    51: "–ª—ë–≥–∫–∞—è –º–æ—Ä–æ—Å—å",
    53: "—É–º–µ—Ä–µ–Ω–Ω–∞—è –º–æ—Ä–æ—Å—å",
    55: "—Å–∏–ª—å–Ω–∞—è –º–æ—Ä–æ—Å—å",
    61: "–Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å",
    63: "–¥–æ–∂–¥—å",
    65: "—Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å",
    66: "–ª–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å",
    67: "—Å–∏–ª—å–Ω—ã–π –ª–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å",
    71: "–Ω–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥",
    73: "—Å–Ω–µ–≥",
    75: "—Å–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥",
    77: "—Å–Ω–µ–∂–Ω—ã–µ –∑—ë—Ä–Ω–∞",
    80: "–ª–∏–≤–Ω–µ–≤—ã–µ –¥–æ–∂–¥–∏",
    81: "—Å–∏–ª—å–Ω—ã–µ –ª–∏–≤–Ω–∏",
    82: "–æ—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–µ –ª–∏–≤–Ω–∏",
    85: "—Å–Ω–µ–≥–æ–ø–∞–¥",
    86: "—Å–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥–æ–ø–∞–¥",
    95: "–≥—Ä–æ–∑–∞",
    96: "–≥—Ä–æ–∑–∞ —Å –≥—Ä–∞–¥–æ–º",
    99: "—Å–∏–ª—å–Ω–∞—è –≥—Ä–æ–∑–∞ —Å –≥—Ä–∞–¥–æ–º",
}

# ---------------------------- –£–¢–ò–õ–ò–¢–´ ----------------------------

def escape_md(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2/Markdown (–º–∏–Ω–∏–º–∞–ª—å–Ω–æ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ Markdown)."""
    # –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π Markdown (ParseMode.MARKDOWN), —Ç—É—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–µ –ø–µ—Ä–µ—É—Å–µ—Ä–¥—Å—Ç–≤–æ–≤–∞—Ç—å
    return text.replace("_", "\\_").replace("*", "\\*").replace("`", "\\`")

def load_museums() -> List[Dict[str, Any]]:
    """–ß–∏—Ç–∞–µ—Ç json —Å–æ —Å–ø–∏—Å–∫–æ–º –º—É–∑–µ–µ–≤."""
    if not MUSEUMS_PATH.exists():
        raise FileNotFoundError(f"–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏: {MUSEUMS_PATH}")
    with MUSEUMS_PATH.open("r", encoding="utf-8") as f:
        data = json.load(f)
    if not isinstance(data, list):
        raise ValueError("–§–æ—Ä–º–∞—Ç museums.json –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: –æ–∂–∏–¥–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤")
    return data

def list_museums_text(museums: List[Dict[str, Any]]) -> str:
    lines = [f"{m['id']}. {m['name']}" for m in museums]
    return "üìú *–°–ø–∏—Å–æ–∫ –º—É–∑–µ–µ–≤:*\n" + "\n".join(lines)

def format_museum_card(m: Dict[str, Any]) -> str:
    name = escape_md(m.get("name", "‚Äî"))
    hours = escape_md(m.get("hours", "‚Äî"))
    address = escape_md(m.get("address", "‚Äî"))
    tickets = escape_md(m.get("tickets", "‚Äî"))
    site = m.get("site", "") or "‚Äî"
    lines = [
        f"üñº *{name}*",
        f"‚è∞ {hours}",
        f"üìç {address}",
        f"üéü {tickets}",
        f"üåê {site}",
    ]
    return "\n".join(lines)

def build_yandex_route_link(address: str) -> str:
    # –§–æ—Ä–º–∞—Ç: https://yandex.ru/maps/?rtext=~<URL-encoded address>
    return f"https://yandex.ru/maps/?rtext=~{quote_plus(address)}"

def normalize(s: str) -> str:
    return " ".join((s or "").strip().lower().split())

def find_museum_by_id(museums: List[Dict[str, Any]], mid: int) -> Optional[Dict[str, Any]]:
    for m in museums:
        if int(m.get("id")) == mid:
            return m
    return None

def fuzzy_find_museums(museums: List[Dict[str, Any]], query: str, limit: int = 5) -> List[Tuple[Dict[str, Any], int]]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ limit –ª—É—á—à–∏—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (—Å–∫–æ—Ä + –æ–±—ä–µ–∫—Ç)."""
    choices = {m["name"]: m for m in museums}
    results = process.extract(query, choices.keys(), scorer=fuzz.WRatio, limit=limit)
    # results -> [(name, score, idx)], –Ω–∞–º –Ω—É–∂–µ–Ω –æ–±—ä–µ–∫—Ç –∏ score
    return [ (choices[name], int(score)) for name, score, _ in results if score >= 50 ]

# ---------------------------- HTTP –°–ï–°–°–ò–Ø –° RETRY ----------------------------

class Http:
    def __init__(self, timeout: float = 7.0, retries: int = 2):
        self.s = requests.Session()
        self.timeout = timeout
        self.retries = retries

    def get(self, url: str, **kwargs) -> requests.Response:
        last_exc = None
        for attempt in range(self.retries + 1):
            try:
                return self.s.get(url, timeout=self.timeout, **kwargs)
            except requests.RequestException as e:
                last_exc = e
                if attempt < self.retries:
                    time.sleep(0.6 * (attempt + 1))
                else:
                    raise last_exc

http = Http()

# ---------------------------- –ü–û–ì–û–î–ê ----------------------------

@lru_cache(maxsize=64)
def geocode_city(name: str) -> Optional[Tuple[float, float, str, str]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (lat, lon, tz, resolved_name) –∏–ª–∏ None.
    –ö—ç—à–∏—Ä—É–µ—Ç—Å—è lru_cache.
    """
    url = OPEN_METEO_GEOCODE.format(name=quote_plus(name))
    r = http.get(url)
    r.raise_for_status()
    data = r.json()
    results = data.get("results") or []
    if not results:
        return None
    top = results[0]
    lat = float(top["latitude"])
    lon = float(top["longitude"])
    tz = top.get("timezone") or "Europe/Moscow"
    resolved = top.get("name") or name
    return lat, lon, tz, resolved

@lru_cache(maxsize=128)
def get_weather(lat: float, lon: float, tz: str) -> Optional[Dict[str, Any]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å —Ç–µ–∫—É—â–µ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π –∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø–æ–≥–æ–¥—ã.
    –ö—ç—à–∏—Ä—É–µ—Ç—Å—è lru_cache.
    """
    url = OPEN_METEO_FORECAST.format(lat=lat, lon=lon, tz=quote_plus(tz))
    r = http.get(url)
    r.raise_for_status()
    data = r.json()
    current = data.get("current") or {}
    temp = current.get("temperature_2m")
    code = current.get("weather_code")
    desc = WEATHER_CODE_MAP.get(code, "–ø–æ–≥–æ–¥–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞")
    return {"temperature": temp, "code": code, "description": desc}

def render_weather_block(city_display: str, weather: Dict[str, Any]) -> str:
    t = weather.get("temperature")
    d = weather.get("description", "‚Äî")
    if t is None:
        return f"üå¶ –ü–æ–≥–æ–¥–∞ –≤ {escape_md(city_display)}: –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
    sign = "+" if t >= 0 else "‚àí"
    t_abs = abs(float(t))
    return (
        f"üå¶ *–ü–æ–≥–æ–¥–∞ –≤ {escape_md(city_display)}:*\n"
        f"–°–µ–π—á–∞—Å: {sign}{t_abs:.1f} ¬∞C, {escape_md(d)}"
    )

# ---------------------------- –•–≠–ù–î–õ–ï–†–´ ----------------------------

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-—Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –º—É–∑–µ–µ–≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–∞.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /help ‚Äî —Å–ø—Ä–∞–≤–∫–∞\n"
        "‚Ä¢ /list ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º—É–∑–µ–µ–≤\n"
        "‚Ä¢ /find <–∑–∞–ø—Ä–æ—Å> ‚Äî –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é\n"
        "‚Ä¢ /museum <id|–Ω–∞–∑–≤–∞–Ω–∏–µ> ‚Äî –∫–∞—Ä—Ç–æ—á–∫–∞ –º—É–∑–µ—è\n"
        "‚Ä¢ /random ‚Äî —Å–ª—É—á–∞–π–Ω—ã–π –º—É–∑–µ–π\n"
        "‚Ä¢ /weather [–≥–æ—Ä–æ–¥] ‚Äî –ø–æ–≥–æ–¥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –°–ü–±)\n"
        "‚Ä¢ /route <id|–Ω–∞–∑–≤–∞–Ω–∏–µ> ‚Äî –º–∞—Ä—à—Ä—É—Ç –≤ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö\n"
        "‚Ä¢ /plan <id|–Ω–∞–∑–≤–∞–Ω–∏–µ> ‚Äî –ø–æ–≥–æ–¥–∞ + –º–∞—Ä—à—Ä—É—Ç\n"
        "‚Ä¢ /ping ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞\n"
    )
    await update.message.reply_text(text)

async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await cmd_start(update, context)

async def cmd_ping(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("pong üèì")

async def cmd_list(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        museums = load_museums()
        await update.message.reply_text(
            list_museums_text(museums), parse_mode=ParseMode.MARKDOWN
        )
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ /list: %s", e)
        await update.message.reply_text("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º—É–∑–µ–µ–≤.")

async def cmd_find(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = " ".join(context.args).strip()
    if not query:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/find <–∑–∞–ø—Ä–æ—Å>`", parse_mode=ParseMode.MARKDOWN)
        return
    try:
        museums = load_museums()
        # –±—ã—Å—Ç—Ä—ã–π –ø–æ–¥—Å—Ç—Ä–æ—á–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
        qn = normalize(query)
        substr = [m for m in museums if qn in normalize(m["name"])]
        if substr:
            lines = [f"{m['id']}. {m['name']}" for m in substr[:20]]
        else:
            # fuzzy
            matches = fuzzy_find_museums(museums, query, limit=10)
            lines = [f"{m['id']}. {m['name']} ({score}%)" for m, score in matches] or ["–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."]
        await update.message.reply_text("üîé –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:\n" + "\n".join(lines))
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ /find: %s", e)
        await update.message.reply_text("‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

async def cmd_museum(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    arg = " ".join(context.args).strip()
    if not arg:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/museum <id|–Ω–∞–∑–≤–∞–Ω–∏–µ>`", parse_mode=ParseMode.MARKDOWN)
        return
    try:
        museums = load_museums()
        museum = None
        if arg.isdigit():
            museum = find_museum_by_id(museums, int(arg))
        if museum is None:
            # fuzzy –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
            matches = fuzzy_find_museums(museums, arg, limit=1)
            museum = matches[0][0] if matches else None
        if not museum:
            await update.message.reply_text("–ù–µ –Ω–∞—à—ë–ª —Ç–∞–∫–æ–π –º—É–∑–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /find <—á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è>.")
            return
        await update.message.reply_text(
            format_museum_card(museum), parse_mode=ParseMode.MARKDOWN
        )
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ /museum: %s", e)
        await update.message.reply_text("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –º—É–∑–µ—è.")

async def cmd_random(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        museums = load_museums()
        museum = random.choice(museums)
        await update.message.reply_text(
            "üé≤ –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä:\n" + format_museum_card(museum),
            parse_mode=ParseMode.MARKDOWN,
        )
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ /random: %s", e)
        await update.message.reply_text("‚ùó –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –º—É–∑–µ–π.")

async def cmd_weather(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    city_arg = " ".join(context.args).strip()
    city_q = city_arg or DEFAULT_CITY
    try:
        geo = geocode_city(city_q)
        if not geo:
            await update.message.reply_text(
                f"–ù–µ –Ω–∞—à—ë–ª –≥–æ—Ä–æ–¥ ‚Äú{city_q}‚Äù. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä: ‚Äú–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥‚Äù."
            )
            return
        lat, lon, tz, city_name = geo
        w = get_weather(lat, lon, tz)
        if not w:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        await update.message.reply_text(
            render_weather_block(city_name, w), parse_mode=ParseMode.MARKDOWN
        )
    except requests.RequestException:
        await update.message.reply_text(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
        )
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ /weather: %s", e)
        await update.message.reply_text("‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–≥–æ–¥—ã.")

async def cmd_route(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    arg = " ".join(context.args).strip()
    if not arg:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/route <id|–Ω–∞–∑–≤–∞–Ω–∏–µ>`", parse_mode=ParseMode.MARKDOWN)
        return
    try:
        museums = load_museums()
        museum = None
        if arg.isdigit():
            museum = find_museum_by_id(museums, int(arg))
        if museum is None:
            matches = fuzzy_find_museums(museums, arg, limit=1)
            museum = matches[0][0] if matches else None
        if not museum:
            # –ü—Ä–µ–¥–ª–æ–∂–∏–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
            suggestions = fuzzy_find_museums(museums, arg, limit=5)
            if suggestions:
                sugg_lines = [f"{m['id']}. {m['name']}" for m, _ in suggestions]
                await update.message.reply_text(
                    "–ù–µ –Ω–∞—à—ë–ª —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É:\n" + "\n".join(sugg_lines)
                )
            else:
                await update.message.reply_text("–ù–µ –Ω–∞—à—ë–ª —Ç–∞–∫–æ–π –º—É–∑–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /find <—á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è>.")
            return
        addr = museum.get("address") or ""
        if not addr:
            await update.message.reply_text("–£ –º—É–∑–µ—è –Ω–µ—Ç –∞–¥—Ä–µ—Å–∞ –≤ –¥–∞–Ω–Ω—ã—Ö.")
            return
        link = build_yandex_route_link(addr)
        text = (
            f"üó∫ *–ú–∞—Ä—à—Ä—É—Ç –¥–æ ¬´{escape_md(museum['name'])}¬ª:*\n"
            f"–ê–¥—Ä–µ—Å: {escape_md(addr)}\n"
            f"–û—Ç–∫—Ä—ã—Ç—å –≤ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö ‚Üí {link}"
        )
        await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ /route: %s", e)
        await update.message.reply_text("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç.")

async def cmd_plan(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    arg = " ".join(context.args).strip()
    if not arg:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/plan <id|–Ω–∞–∑–≤–∞–Ω–∏–µ>`", parse_mode=ParseMode.MARKDOWN)
        return
    # –õ–æ–≥–∏–∫–∞: –Ω–∞–π–¥—ë–º –º—É–∑–µ–π, –¥–æ—Å—Ç–∞–Ω–µ–º –∞–¥—Ä–µ—Å, –ø–æ–ª—É—á–∏–º –ø–æ–≥–æ–¥—É –¥–ª—è –°–ü–± (–∏–ª–∏ –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –ø–∞—Ä—Å–∏—Ç—å –≥–æ—Ä–æ–¥ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞)
    try:
        museums = load_museums()
        museum = None
        if arg.isdigit():
            museum = find_museum_by_id(museums, int(arg))
        if museum is None:
            matches = fuzzy_find_museums(museums, arg, limit=1)
            museum = matches[0][0] if matches else None
        if not museum:
            await update.message.reply_text("–ù–µ –Ω–∞—à—ë–ª —Ç–∞–∫–æ–π –º—É–∑–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /find <—á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è>.")
            return

        # –ü–æ–≥–æ–¥–∞ –ø–æ –°–ü–± –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        geo = geocode_city(DEFAULT_CITY)
        weather_text = "–ü–æ–≥–æ–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
        if geo:
            lat, lon, tz, city_name = geo
            w = get_weather(lat, lon, tz)
            if w:
                weather_text = render_weather_block(city_name, w)

        addr = museum.get("address") or ""
        link = build_yandex_route_link(addr) if addr else "‚Äî"

        text = (
            f"{weather_text}\n\n"
            f"üó∫ *–ú–∞—Ä—à—Ä—É—Ç –¥–æ ¬´{escape_md(museum['name'])}¬ª:*\n"
            f"–ê–¥—Ä–µ—Å: {escape_md(addr) if addr else '‚Äî'}\n"
            f"–û—Ç–∫—Ä—ã—Ç—å –≤ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö ‚Üí {link}"
        )
        await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ /plan: %s", e)
        await update.message.reply_text("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω –≤–∏–∑–∏—Ç–∞.")

async def handle_text_guess(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ–ø—ã—Ç–∞–µ–º—Å—è —É–≥–∞–¥–∞—Ç—å –º—É–∑–µ–π –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã."""
    text = (update.message.text or "").strip()
    if not text:
        return
    try:
        museums = load_museums()
        matches = fuzzy_find_museums(museums, text, limit=5)
        if not matches:
            return
        lines = [f"{m['id']}. {m['name']}" for m, _ in matches]
        reply = (
            "–ü–æ—Ö–æ–∂–µ, –≤—ã –∏—â–µ—Ç–µ –º—É–∑–µ–π. –ü–æ–¥—Ö–æ–¥—è—Ç:\n" + "\n".join(lines) +
            "\n\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n/museum <id>  ‚Ä¢  /route <id>  ‚Ä¢  /plan <id>"
        )
        await update.message.reply_text(reply)
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ handle_text_guess: %s", e)

# ---------------------------- MAIN ----------------------------

def main() -> None:
    token = os.getenv("BOT_TOKEN")
    if not token:
        logger.error("–ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN (—ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è). –ü—Ä–∏–º–µ—Ä:\n  export BOT_TOKEN=123:ABC")
        raise SystemExit(1)

    application: Application = ApplicationBuilder().token(token).build()

    application.add_handler(CommandHandler("start", cmd_start))
    application.add_handler(CommandHandler("help", cmd_help))
    application.add_handler(CommandHandler("ping", cmd_ping))
    application.add_handler(CommandHandler("list", cmd_list))
    application.add_handler(CommandHandler("find", cmd_find))
    application.add_handler(CommandHandler("museum", cmd_museum))
    application.add_handler(CommandHandler("random", cmd_random))
    application.add_handler(CommandHandler("weather", cmd_weather))
    application.add_handler(CommandHandler("route", cmd_route))
    application.add_handler(CommandHandler("plan", cmd_plan))

    # –õ—é–±–æ–π —Ç–µ–∫—Å—Ç –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º —É–≥–∞–¥–∞—Ç—å
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_guess))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è‚Ä¶")
    application.run_polling(close_loop=False)

if __name__ == "__main__":
    main()
